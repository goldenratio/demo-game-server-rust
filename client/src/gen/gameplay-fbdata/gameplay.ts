// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PlayerControl } from '../gameplay-fbdata/player-control.js';
import { Vec2 } from '../gameplay-fbdata/vec2.js';


export class Gameplay {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Gameplay {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameplay(bb:flatbuffers.ByteBuffer, obj?:Gameplay):Gameplay {
  return (obj || new Gameplay()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameplay(bb:flatbuffers.ByteBuffer, obj?:Gameplay):Gameplay {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Gameplay()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playerControls(obj?:PlayerControl):PlayerControl|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PlayerControl()).__init(this.bb_pos + offset, this.bb!) : null;
}

playerPosition(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startGameplay(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPlayerControls(builder:flatbuffers.Builder, playerControlsOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, playerControlsOffset, 0);
}

static addPlayerPosition(builder:flatbuffers.Builder, playerPositionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, playerPositionOffset, 0);
}

static endGameplay(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGameplayBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedGameplayBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
