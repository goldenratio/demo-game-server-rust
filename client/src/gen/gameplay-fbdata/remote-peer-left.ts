// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RemotePeerLeft {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RemotePeerLeft {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRemotePeerLeft(bb:flatbuffers.ByteBuffer, obj?:RemotePeerLeft):RemotePeerLeft {
  return (obj || new RemotePeerLeft()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRemotePeerLeft(bb:flatbuffers.ByteBuffer, obj?:RemotePeerLeft):RemotePeerLeft {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RemotePeerLeft()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playerId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startRemotePeerLeft(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPlayerId(builder:flatbuffers.Builder, playerId:number) {
  builder.addFieldInt32(0, playerId, 0);
}

static endRemotePeerLeft(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRemotePeerLeft(builder:flatbuffers.Builder, playerId:number):flatbuffers.Offset {
  RemotePeerLeft.startRemotePeerLeft(builder);
  RemotePeerLeft.addPlayerId(builder, playerId);
  return RemotePeerLeft.endRemotePeerLeft(builder);
}
}
