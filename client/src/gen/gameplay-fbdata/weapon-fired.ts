// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class WeaponFired {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WeaponFired {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWeaponFired(bb:flatbuffers.ByteBuffer, obj?:WeaponFired):WeaponFired {
  return (obj || new WeaponFired()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWeaponFired(bb:flatbuffers.ByteBuffer, obj?:WeaponFired):WeaponFired {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WeaponFired()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

angle():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

power():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startWeaponFired(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAngle(builder:flatbuffers.Builder, angle:number) {
  builder.addFieldFloat32(0, angle, 0.0);
}

static addPower(builder:flatbuffers.Builder, power:number) {
  builder.addFieldFloat32(1, power, 0.0);
}

static endWeaponFired(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWeaponFired(builder:flatbuffers.Builder, angle:number, power:number):flatbuffers.Offset {
  WeaponFired.startWeaponFired(builder);
  WeaponFired.addAngle(builder, angle);
  WeaponFired.addPower(builder, power);
  return WeaponFired.endWeaponFired(builder);
}
}
