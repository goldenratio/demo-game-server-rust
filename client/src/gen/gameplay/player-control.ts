// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class PlayerControl {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerControl {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

up():boolean {
  return !!this.bb!.readInt8(this.bb_pos);
}

down():boolean {
  return !!this.bb!.readInt8(this.bb_pos + 1);
}

left():boolean {
  return !!this.bb!.readInt8(this.bb_pos + 2);
}

right():boolean {
  return !!this.bb!.readInt8(this.bb_pos + 3);
}

static sizeOf():number {
  return 4;
}

static createPlayerControl(builder:flatbuffers.Builder, up: boolean, down: boolean, left: boolean, right: boolean):flatbuffers.Offset {
  builder.prep(1, 4);
  builder.writeInt8(Number(Boolean(right)));
  builder.writeInt8(Number(Boolean(left)));
  builder.writeInt8(Number(Boolean(down)));
  builder.writeInt8(Number(Boolean(up)));
  return builder.offset();
}

}
