// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod gameplay {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum UserOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct User<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for User<'a> {
  type Inner = User<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> User<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_PLAYER_ID: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    User { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args UserArgs<'args>
  ) -> flatbuffers::WIPOffset<User<'bldr>> {
    let mut builder = UserBuilder::new(_fbb);
    if let Some(x) = args.player_id { builder.add_player_id(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(User::VT_NAME, None)}
  }
  #[inline]
  pub fn player_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(User::VT_PLAYER_ID, None)}
  }
}

impl flatbuffers::Verifiable for User<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("player_id", Self::VT_PLAYER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct UserArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub player_id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for UserArgs<'a> {
  #[inline]
  fn default() -> Self {
    UserArgs {
      name: None,
      player_id: None,
    }
  }
}

pub struct UserBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> UserBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(User::VT_NAME, name);
  }
  #[inline]
  pub fn add_player_id(&mut self, player_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(User::VT_PLAYER_ID, player_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UserBuilder<'a, 'b> {
    let start = _fbb.start_table();
    UserBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<User<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for User<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("User");
      ds.field("name", &self.name());
      ds.field("player_id", &self.player_id());
      ds.finish()
  }
}
pub enum GameplayOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Gameplay<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Gameplay<'a> {
  type Inner = Gameplay<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Gameplay<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_PLAYER_ID: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Gameplay { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GameplayArgs<'args>
  ) -> flatbuffers::WIPOffset<Gameplay<'bldr>> {
    let mut builder = GameplayBuilder::new(_fbb);
    if let Some(x) = args.player_id { builder.add_player_id(x); }
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.finish()
  }


  #[inline]
  pub fn x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Gameplay::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Gameplay::VT_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn player_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Gameplay::VT_PLAYER_ID, None)}
  }
}

impl flatbuffers::Verifiable for Gameplay<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("player_id", Self::VT_PLAYER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct GameplayArgs<'a> {
    pub x: f32,
    pub y: f32,
    pub player_id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for GameplayArgs<'a> {
  #[inline]
  fn default() -> Self {
    GameplayArgs {
      x: 0.0,
      y: 0.0,
      player_id: None,
    }
  }
}

pub struct GameplayBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GameplayBuilder<'a, 'b> {
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(Gameplay::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(Gameplay::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_player_id(&mut self, player_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Gameplay::VT_PLAYER_ID, player_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameplayBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GameplayBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Gameplay<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Gameplay<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Gameplay");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("player_id", &self.player_id());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Gameplay`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn root_as_gameplay(buf: &[u8]) -> Result<Gameplay, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Gameplay>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Gameplay` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_gameplay_unchecked`.
pub fn size_prefixed_root_as_gameplay(buf: &[u8]) -> Result<Gameplay, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Gameplay>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Gameplay` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn root_as_gameplay_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Gameplay<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Gameplay<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Gameplay` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn size_prefixed_root_as_gameplay_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Gameplay<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Gameplay<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Gameplay and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Gameplay`.
pub unsafe fn root_as_gameplay_unchecked(buf: &[u8]) -> Gameplay {
  flatbuffers::root_unchecked::<Gameplay>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Gameplay and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Gameplay`.
pub unsafe fn size_prefixed_root_as_gameplay_unchecked(buf: &[u8]) -> Gameplay {
  flatbuffers::size_prefixed_root_unchecked::<Gameplay>(buf)
}
#[inline]
pub fn finish_gameplay_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Gameplay<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_gameplay_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Gameplay<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Gameplay

