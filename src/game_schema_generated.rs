// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod gameplay_fbdata {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_GAME_EVENT_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_GAME_EVENT_TYPE: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GAME_EVENT_TYPE: [GameEventType; 4] = [
  GameEventType::RemotePeerJoined,
  GameEventType::RemotePeerLeft,
  GameEventType::RemotePeerPositionUpdate,
  GameEventType::GameWorldUpdate,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GameEventType(pub i8);
#[allow(non_upper_case_globals)]
impl GameEventType {
  pub const RemotePeerJoined: Self = Self(0);
  pub const RemotePeerLeft: Self = Self(1);
  pub const RemotePeerPositionUpdate: Self = Self(2);
  pub const GameWorldUpdate: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::RemotePeerJoined,
    Self::RemotePeerLeft,
    Self::RemotePeerPositionUpdate,
    Self::GameWorldUpdate,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::RemotePeerJoined => Some("RemotePeerJoined"),
      Self::RemotePeerLeft => Some("RemotePeerLeft"),
      Self::RemotePeerPositionUpdate => Some("RemotePeerPositionUpdate"),
      Self::GameWorldUpdate => Some("GameWorldUpdate"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for GameEventType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for GameEventType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for GameEventType {
    type Output = GameEventType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GameEventType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for GameEventType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GameEventType {}
// struct PlayerControl, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct PlayerControl(pub [u8; 4]);
impl Default for PlayerControl { 
  fn default() -> Self { 
    Self([0; 4])
  }
}
impl core::fmt::Debug for PlayerControl {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("PlayerControl")
      .field("up", &self.up())
      .field("down", &self.down())
      .field("left", &self.left())
      .field("right", &self.right())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PlayerControl {}
impl<'a> flatbuffers::Follow<'a> for PlayerControl {
  type Inner = &'a PlayerControl;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PlayerControl>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PlayerControl {
  type Inner = &'a PlayerControl;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PlayerControl>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PlayerControl {
    type Output = PlayerControl;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const PlayerControl as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for PlayerControl {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> PlayerControl {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    up: bool,
    down: bool,
    left: bool,
    right: bool,
  ) -> Self {
    let mut s = Self([0; 4]);
    s.set_up(up);
    s.set_down(down);
    s.set_left(left);
    s.set_right(right);
    s
  }

  pub fn up(&self) -> bool {
    let mut mem = core::mem::MaybeUninit::<<bool as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_up(&mut self, x: bool) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn down(&self) -> bool {
    let mut mem = core::mem::MaybeUninit::<<bool as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[1..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_down(&mut self, x: bool) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[1..].as_mut_ptr(),
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn left(&self) -> bool {
    let mut mem = core::mem::MaybeUninit::<<bool as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[2..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_left(&mut self, x: bool) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[2..].as_mut_ptr(),
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn right(&self) -> bool {
    let mut mem = core::mem::MaybeUninit::<<bool as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[3..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_right(&mut self, x: bool) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[3..].as_mut_ptr(),
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Vec2, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec2(pub [u8; 8]);
impl Default for Vec2 { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Vec2 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec2")
      .field("x", &self.x())
      .field("y", &self.y())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec2 {}
impl<'a> flatbuffers::Follow<'a> for Vec2 {
  type Inner = &'a Vec2;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec2>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec2 {
  type Inner = &'a Vec2;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec2>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec2 {
    type Output = Vec2;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec2 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vec2 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec2 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_x(x);
    s.set_y(y);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct PlayerData, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct PlayerData(pub [u8; 12]);
impl Default for PlayerData { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for PlayerData {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("PlayerData")
      .field("player_id", &self.player_id())
      .field("player_position", &self.player_position())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PlayerData {}
impl<'a> flatbuffers::Follow<'a> for PlayerData {
  type Inner = &'a PlayerData;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PlayerData>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PlayerData {
  type Inner = &'a PlayerData;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PlayerData>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PlayerData {
    type Output = PlayerData;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const PlayerData as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for PlayerData {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> PlayerData {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    player_id: u32,
    player_position: &Vec2,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_player_id(player_id);
    s.set_player_position(player_position);
    s
  }

  pub fn player_id(&self) -> u32 {
    let mut mem = core::mem::MaybeUninit::<<u32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_player_id(&mut self, x: u32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn player_position(&self) -> &Vec2 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[4..].as_ptr() as *const Vec2) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_player_position(&mut self, x: &Vec2) {
    self.0[4..4 + 8].copy_from_slice(&x.0)
  }

}

pub enum GameplayOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Gameplay<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Gameplay<'a> {
  type Inner = Gameplay<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Gameplay<'a> {
  pub const VT_PLAYER_CONTROLS: flatbuffers::VOffsetT = 4;
  pub const VT_PLAYER_POSITION: flatbuffers::VOffsetT = 6;
  pub const VT_PLAYER_ID: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Gameplay { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GameplayArgs<'args>
  ) -> flatbuffers::WIPOffset<Gameplay<'bldr>> {
    let mut builder = GameplayBuilder::new(_fbb);
    builder.add_player_id(args.player_id);
    if let Some(x) = args.player_position { builder.add_player_position(x); }
    if let Some(x) = args.player_controls { builder.add_player_controls(x); }
    builder.finish()
  }


  #[inline]
  pub fn player_controls(&self) -> Option<&'a PlayerControl> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PlayerControl>(Gameplay::VT_PLAYER_CONTROLS, None)}
  }
  #[inline]
  pub fn player_position(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(Gameplay::VT_PLAYER_POSITION, None)}
  }
  #[inline]
  pub fn player_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Gameplay::VT_PLAYER_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Gameplay<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PlayerControl>("player_controls", Self::VT_PLAYER_CONTROLS, false)?
     .visit_field::<Vec2>("player_position", Self::VT_PLAYER_POSITION, false)?
     .visit_field::<u32>("player_id", Self::VT_PLAYER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct GameplayArgs<'a> {
    pub player_controls: Option<&'a PlayerControl>,
    pub player_position: Option<&'a Vec2>,
    pub player_id: u32,
}
impl<'a> Default for GameplayArgs<'a> {
  #[inline]
  fn default() -> Self {
    GameplayArgs {
      player_controls: None,
      player_position: None,
      player_id: 0,
    }
  }
}

pub struct GameplayBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GameplayBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_controls(&mut self, player_controls: &PlayerControl) {
    self.fbb_.push_slot_always::<&PlayerControl>(Gameplay::VT_PLAYER_CONTROLS, player_controls);
  }
  #[inline]
  pub fn add_player_position(&mut self, player_position: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(Gameplay::VT_PLAYER_POSITION, player_position);
  }
  #[inline]
  pub fn add_player_id(&mut self, player_id: u32) {
    self.fbb_.push_slot::<u32>(Gameplay::VT_PLAYER_ID, player_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameplayBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GameplayBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Gameplay<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Gameplay<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Gameplay");
      ds.field("player_controls", &self.player_controls());
      ds.field("player_position", &self.player_position());
      ds.field("player_id", &self.player_id());
      ds.finish()
  }
}
pub enum GameEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GameEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GameEvent<'a> {
  type Inner = GameEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GameEvent<'a> {
  pub const VT_EVENT_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_PLAYER_DATA_LIST: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GameEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GameEventArgs<'args>
  ) -> flatbuffers::WIPOffset<GameEvent<'bldr>> {
    let mut builder = GameEventBuilder::new(_fbb);
    if let Some(x) = args.player_data_list { builder.add_player_data_list(x); }
    builder.add_event_type(args.event_type);
    builder.finish()
  }


  #[inline]
  pub fn event_type(&self) -> GameEventType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GameEventType>(GameEvent::VT_EVENT_TYPE, Some(GameEventType::RemotePeerJoined)).unwrap()}
  }
  #[inline]
  pub fn player_data_list(&self) -> Option<flatbuffers::Vector<'a, PlayerData>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, PlayerData>>>(GameEvent::VT_PLAYER_DATA_LIST, None)}
  }
}

impl flatbuffers::Verifiable for GameEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<GameEventType>("event_type", Self::VT_EVENT_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, PlayerData>>>("player_data_list", Self::VT_PLAYER_DATA_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct GameEventArgs<'a> {
    pub event_type: GameEventType,
    pub player_data_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, PlayerData>>>,
}
impl<'a> Default for GameEventArgs<'a> {
  #[inline]
  fn default() -> Self {
    GameEventArgs {
      event_type: GameEventType::RemotePeerJoined,
      player_data_list: None,
    }
  }
}

pub struct GameEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GameEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_event_type(&mut self, event_type: GameEventType) {
    self.fbb_.push_slot::<GameEventType>(GameEvent::VT_EVENT_TYPE, event_type, GameEventType::RemotePeerJoined);
  }
  #[inline]
  pub fn add_player_data_list(&mut self, player_data_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , PlayerData>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameEvent::VT_PLAYER_DATA_LIST, player_data_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GameEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GameEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GameEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GameEvent");
      ds.field("event_type", &self.event_type());
      ds.field("player_data_list", &self.player_data_list());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Gameplay`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn root_as_gameplay(buf: &[u8]) -> Result<Gameplay, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Gameplay>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Gameplay` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_gameplay_unchecked`.
pub fn size_prefixed_root_as_gameplay(buf: &[u8]) -> Result<Gameplay, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Gameplay>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Gameplay` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn root_as_gameplay_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Gameplay<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Gameplay<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Gameplay` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn size_prefixed_root_as_gameplay_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Gameplay<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Gameplay<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Gameplay and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Gameplay`.
pub unsafe fn root_as_gameplay_unchecked(buf: &[u8]) -> Gameplay {
  flatbuffers::root_unchecked::<Gameplay>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Gameplay and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Gameplay`.
pub unsafe fn size_prefixed_root_as_gameplay_unchecked(buf: &[u8]) -> Gameplay {
  flatbuffers::size_prefixed_root_unchecked::<Gameplay>(buf)
}
#[inline]
pub fn finish_gameplay_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Gameplay<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_gameplay_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Gameplay<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod GameplayFBData

