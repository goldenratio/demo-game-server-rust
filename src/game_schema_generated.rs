// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod gameplay_fbdata {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RESPONSE_MESSAGE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RESPONSE_MESSAGE: u8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RESPONSE_MESSAGE: [ResponseMessage; 5] = [
  ResponseMessage::NONE,
  ResponseMessage::RemotePeerJoined,
  ResponseMessage::RemotePeerLeft,
  ResponseMessage::RemotePeerPositionUpdate,
  ResponseMessage::GameWorldUpdate,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ResponseMessage(pub u8);
#[allow(non_upper_case_globals)]
impl ResponseMessage {
  pub const NONE: Self = Self(0);
  pub const RemotePeerJoined: Self = Self(1);
  pub const RemotePeerLeft: Self = Self(2);
  pub const RemotePeerPositionUpdate: Self = Self(3);
  pub const GameWorldUpdate: Self = Self(4);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::RemotePeerJoined,
    Self::RemotePeerLeft,
    Self::RemotePeerPositionUpdate,
    Self::GameWorldUpdate,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::RemotePeerJoined => Some("RemotePeerJoined"),
      Self::RemotePeerLeft => Some("RemotePeerLeft"),
      Self::RemotePeerPositionUpdate => Some("RemotePeerPositionUpdate"),
      Self::GameWorldUpdate => Some("GameWorldUpdate"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ResponseMessage {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ResponseMessage {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ResponseMessage {
    type Output = ResponseMessage;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ResponseMessage {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ResponseMessage {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ResponseMessage {}
pub struct ResponseMessageUnionTableOffset {}

// struct PlayerControl, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct PlayerControl(pub [u8; 4]);
impl Default for PlayerControl { 
  fn default() -> Self { 
    Self([0; 4])
  }
}
impl core::fmt::Debug for PlayerControl {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("PlayerControl")
      .field("up", &self.up())
      .field("down", &self.down())
      .field("left", &self.left())
      .field("right", &self.right())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PlayerControl {}
impl<'a> flatbuffers::Follow<'a> for PlayerControl {
  type Inner = &'a PlayerControl;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PlayerControl>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PlayerControl {
  type Inner = &'a PlayerControl;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PlayerControl>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PlayerControl {
    type Output = PlayerControl;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const PlayerControl as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for PlayerControl {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> PlayerControl {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    up: bool,
    down: bool,
    left: bool,
    right: bool,
  ) -> Self {
    let mut s = Self([0; 4]);
    s.set_up(up);
    s.set_down(down);
    s.set_left(left);
    s.set_right(right);
    s
  }

  pub fn up(&self) -> bool {
    let mut mem = core::mem::MaybeUninit::<<bool as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_up(&mut self, x: bool) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn down(&self) -> bool {
    let mut mem = core::mem::MaybeUninit::<<bool as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[1..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_down(&mut self, x: bool) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[1..].as_mut_ptr(),
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn left(&self) -> bool {
    let mut mem = core::mem::MaybeUninit::<<bool as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[2..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_left(&mut self, x: bool) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[2..].as_mut_ptr(),
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn right(&self) -> bool {
    let mut mem = core::mem::MaybeUninit::<<bool as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[3..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_right(&mut self, x: bool) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[3..].as_mut_ptr(),
        core::mem::size_of::<<bool as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Vec2, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec2(pub [u8; 8]);
impl Default for Vec2 { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Vec2 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec2")
      .field("x", &self.x())
      .field("y", &self.y())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec2 {}
impl<'a> flatbuffers::Follow<'a> for Vec2 {
  type Inner = &'a Vec2;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec2>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec2 {
  type Inner = &'a Vec2;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec2>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec2 {
    type Output = Vec2;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec2 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vec2 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec2 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_x(x);
    s.set_y(y);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct PlayerData, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct PlayerData(pub [u8; 12]);
impl Default for PlayerData { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for PlayerData {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("PlayerData")
      .field("player_id", &self.player_id())
      .field("player_position", &self.player_position())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PlayerData {}
impl<'a> flatbuffers::Follow<'a> for PlayerData {
  type Inner = &'a PlayerData;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PlayerData>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PlayerData {
  type Inner = &'a PlayerData;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PlayerData>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PlayerData {
    type Output = PlayerData;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const PlayerData as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for PlayerData {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> PlayerData {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    player_id: u32,
    player_position: &Vec2,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_player_id(player_id);
    s.set_player_position(player_position);
    s
  }

  pub fn player_id(&self) -> u32 {
    let mut mem = core::mem::MaybeUninit::<<u32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_player_id(&mut self, x: u32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn player_position(&self) -> &Vec2 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[4..].as_ptr() as *const Vec2) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_player_position(&mut self, x: &Vec2) {
    self.0[4..4 + 8].copy_from_slice(&x.0)
  }

}

pub enum GameplayOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Gameplay<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Gameplay<'a> {
  type Inner = Gameplay<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Gameplay<'a> {
  pub const VT_PLAYER_CONTROLS: flatbuffers::VOffsetT = 4;
  pub const VT_PLAYER_POSITION: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Gameplay { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GameplayArgs<'args>
  ) -> flatbuffers::WIPOffset<Gameplay<'bldr>> {
    let mut builder = GameplayBuilder::new(_fbb);
    if let Some(x) = args.player_position { builder.add_player_position(x); }
    if let Some(x) = args.player_controls { builder.add_player_controls(x); }
    builder.finish()
  }


  #[inline]
  pub fn player_controls(&self) -> Option<&'a PlayerControl> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PlayerControl>(Gameplay::VT_PLAYER_CONTROLS, None)}
  }
  #[inline]
  pub fn player_position(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(Gameplay::VT_PLAYER_POSITION, None)}
  }
}

impl flatbuffers::Verifiable for Gameplay<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PlayerControl>("player_controls", Self::VT_PLAYER_CONTROLS, false)?
     .visit_field::<Vec2>("player_position", Self::VT_PLAYER_POSITION, false)?
     .finish();
    Ok(())
  }
}
pub struct GameplayArgs<'a> {
    pub player_controls: Option<&'a PlayerControl>,
    pub player_position: Option<&'a Vec2>,
}
impl<'a> Default for GameplayArgs<'a> {
  #[inline]
  fn default() -> Self {
    GameplayArgs {
      player_controls: None,
      player_position: None,
    }
  }
}

pub struct GameplayBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GameplayBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_controls(&mut self, player_controls: &PlayerControl) {
    self.fbb_.push_slot_always::<&PlayerControl>(Gameplay::VT_PLAYER_CONTROLS, player_controls);
  }
  #[inline]
  pub fn add_player_position(&mut self, player_position: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(Gameplay::VT_PLAYER_POSITION, player_position);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameplayBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GameplayBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Gameplay<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Gameplay<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Gameplay");
      ds.field("player_controls", &self.player_controls());
      ds.field("player_position", &self.player_position());
      ds.finish()
  }
}
pub enum RemotePeerJoinedOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RemotePeerJoined<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RemotePeerJoined<'a> {
  type Inner = RemotePeerJoined<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RemotePeerJoined<'a> {
  pub const VT_PLAYER_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RemotePeerJoined { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RemotePeerJoinedArgs<'args>
  ) -> flatbuffers::WIPOffset<RemotePeerJoined<'bldr>> {
    let mut builder = RemotePeerJoinedBuilder::new(_fbb);
    if let Some(x) = args.player_data { builder.add_player_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn player_data(&self) -> Option<&'a PlayerData> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PlayerData>(RemotePeerJoined::VT_PLAYER_DATA, None)}
  }
}

impl flatbuffers::Verifiable for RemotePeerJoined<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PlayerData>("player_data", Self::VT_PLAYER_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct RemotePeerJoinedArgs<'a> {
    pub player_data: Option<&'a PlayerData>,
}
impl<'a> Default for RemotePeerJoinedArgs<'a> {
  #[inline]
  fn default() -> Self {
    RemotePeerJoinedArgs {
      player_data: None,
    }
  }
}

pub struct RemotePeerJoinedBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RemotePeerJoinedBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_data(&mut self, player_data: &PlayerData) {
    self.fbb_.push_slot_always::<&PlayerData>(RemotePeerJoined::VT_PLAYER_DATA, player_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RemotePeerJoinedBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RemotePeerJoinedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RemotePeerJoined<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RemotePeerJoined<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RemotePeerJoined");
      ds.field("player_data", &self.player_data());
      ds.finish()
  }
}
pub enum RemotePeerLeftOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RemotePeerLeft<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RemotePeerLeft<'a> {
  type Inner = RemotePeerLeft<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RemotePeerLeft<'a> {
  pub const VT_PLAYER_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RemotePeerLeft { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RemotePeerLeftArgs
  ) -> flatbuffers::WIPOffset<RemotePeerLeft<'bldr>> {
    let mut builder = RemotePeerLeftBuilder::new(_fbb);
    builder.add_player_id(args.player_id);
    builder.finish()
  }


  #[inline]
  pub fn player_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(RemotePeerLeft::VT_PLAYER_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for RemotePeerLeft<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("player_id", Self::VT_PLAYER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct RemotePeerLeftArgs {
    pub player_id: u32,
}
impl<'a> Default for RemotePeerLeftArgs {
  #[inline]
  fn default() -> Self {
    RemotePeerLeftArgs {
      player_id: 0,
    }
  }
}

pub struct RemotePeerLeftBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RemotePeerLeftBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_id(&mut self, player_id: u32) {
    self.fbb_.push_slot::<u32>(RemotePeerLeft::VT_PLAYER_ID, player_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RemotePeerLeftBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RemotePeerLeftBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RemotePeerLeft<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RemotePeerLeft<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RemotePeerLeft");
      ds.field("player_id", &self.player_id());
      ds.finish()
  }
}
pub enum RemotePeerPositionUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RemotePeerPositionUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RemotePeerPositionUpdate<'a> {
  type Inner = RemotePeerPositionUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RemotePeerPositionUpdate<'a> {
  pub const VT_PLAYER_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RemotePeerPositionUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RemotePeerPositionUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<RemotePeerPositionUpdate<'bldr>> {
    let mut builder = RemotePeerPositionUpdateBuilder::new(_fbb);
    if let Some(x) = args.player_data { builder.add_player_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn player_data(&self) -> Option<&'a PlayerData> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PlayerData>(RemotePeerPositionUpdate::VT_PLAYER_DATA, None)}
  }
}

impl flatbuffers::Verifiable for RemotePeerPositionUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PlayerData>("player_data", Self::VT_PLAYER_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct RemotePeerPositionUpdateArgs<'a> {
    pub player_data: Option<&'a PlayerData>,
}
impl<'a> Default for RemotePeerPositionUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    RemotePeerPositionUpdateArgs {
      player_data: None,
    }
  }
}

pub struct RemotePeerPositionUpdateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RemotePeerPositionUpdateBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_data(&mut self, player_data: &PlayerData) {
    self.fbb_.push_slot_always::<&PlayerData>(RemotePeerPositionUpdate::VT_PLAYER_DATA, player_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RemotePeerPositionUpdateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RemotePeerPositionUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RemotePeerPositionUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RemotePeerPositionUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RemotePeerPositionUpdate");
      ds.field("player_data", &self.player_data());
      ds.finish()
  }
}
pub enum GameWorldUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GameWorldUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GameWorldUpdate<'a> {
  type Inner = GameWorldUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GameWorldUpdate<'a> {
  pub const VT_PLAYER_DATA_LIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GameWorldUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GameWorldUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<GameWorldUpdate<'bldr>> {
    let mut builder = GameWorldUpdateBuilder::new(_fbb);
    if let Some(x) = args.player_data_list { builder.add_player_data_list(x); }
    builder.finish()
  }


  #[inline]
  pub fn player_data_list(&self) -> Option<flatbuffers::Vector<'a, PlayerData>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, PlayerData>>>(GameWorldUpdate::VT_PLAYER_DATA_LIST, None)}
  }
}

impl flatbuffers::Verifiable for GameWorldUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, PlayerData>>>("player_data_list", Self::VT_PLAYER_DATA_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct GameWorldUpdateArgs<'a> {
    pub player_data_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, PlayerData>>>,
}
impl<'a> Default for GameWorldUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    GameWorldUpdateArgs {
      player_data_list: None,
    }
  }
}

pub struct GameWorldUpdateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GameWorldUpdateBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_data_list(&mut self, player_data_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , PlayerData>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameWorldUpdate::VT_PLAYER_DATA_LIST, player_data_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameWorldUpdateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GameWorldUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GameWorldUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GameWorldUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GameWorldUpdate");
      ds.field("player_data_list", &self.player_data_list());
      ds.finish()
  }
}
pub enum GameReponseEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GameReponseEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GameReponseEvent<'a> {
  type Inner = GameReponseEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GameReponseEvent<'a> {
  pub const VT_MSG_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_MSG: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GameReponseEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GameReponseEventArgs
  ) -> flatbuffers::WIPOffset<GameReponseEvent<'bldr>> {
    let mut builder = GameReponseEventBuilder::new(_fbb);
    if let Some(x) = args.msg { builder.add_msg(x); }
    builder.add_msg_type(args.msg_type);
    builder.finish()
  }


  #[inline]
  pub fn msg_type(&self) -> ResponseMessage {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ResponseMessage>(GameReponseEvent::VT_MSG_TYPE, Some(ResponseMessage::NONE)).unwrap()}
  }
  #[inline]
  pub fn msg(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(GameReponseEvent::VT_MSG, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_remote_peer_joined(&self) -> Option<RemotePeerJoined<'a>> {
    if self.msg_type() == ResponseMessage::RemotePeerJoined {
      self.msg().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { RemotePeerJoined::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_remote_peer_left(&self) -> Option<RemotePeerLeft<'a>> {
    if self.msg_type() == ResponseMessage::RemotePeerLeft {
      self.msg().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { RemotePeerLeft::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_remote_peer_position_update(&self) -> Option<RemotePeerPositionUpdate<'a>> {
    if self.msg_type() == ResponseMessage::RemotePeerPositionUpdate {
      self.msg().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { RemotePeerPositionUpdate::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_game_world_update(&self) -> Option<GameWorldUpdate<'a>> {
    if self.msg_type() == ResponseMessage::GameWorldUpdate {
      self.msg().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { GameWorldUpdate::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for GameReponseEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<ResponseMessage, _>("msg_type", Self::VT_MSG_TYPE, "msg", Self::VT_MSG, false, |key, v, pos| {
        match key {
          ResponseMessage::RemotePeerJoined => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RemotePeerJoined>>("ResponseMessage::RemotePeerJoined", pos),
          ResponseMessage::RemotePeerLeft => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RemotePeerLeft>>("ResponseMessage::RemotePeerLeft", pos),
          ResponseMessage::RemotePeerPositionUpdate => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RemotePeerPositionUpdate>>("ResponseMessage::RemotePeerPositionUpdate", pos),
          ResponseMessage::GameWorldUpdate => v.verify_union_variant::<flatbuffers::ForwardsUOffset<GameWorldUpdate>>("ResponseMessage::GameWorldUpdate", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct GameReponseEventArgs {
    pub msg_type: ResponseMessage,
    pub msg: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for GameReponseEventArgs {
  #[inline]
  fn default() -> Self {
    GameReponseEventArgs {
      msg_type: ResponseMessage::NONE,
      msg: None,
    }
  }
}

pub struct GameReponseEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GameReponseEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_msg_type(&mut self, msg_type: ResponseMessage) {
    self.fbb_.push_slot::<ResponseMessage>(GameReponseEvent::VT_MSG_TYPE, msg_type, ResponseMessage::NONE);
  }
  #[inline]
  pub fn add_msg(&mut self, msg: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameReponseEvent::VT_MSG, msg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameReponseEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GameReponseEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GameReponseEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GameReponseEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GameReponseEvent");
      ds.field("msg_type", &self.msg_type());
      match self.msg_type() {
        ResponseMessage::RemotePeerJoined => {
          if let Some(x) = self.msg_as_remote_peer_joined() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ResponseMessage::RemotePeerLeft => {
          if let Some(x) = self.msg_as_remote_peer_left() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ResponseMessage::RemotePeerPositionUpdate => {
          if let Some(x) = self.msg_as_remote_peer_position_update() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ResponseMessage::GameWorldUpdate => {
          if let Some(x) = self.msg_as_game_world_update() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("msg", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Gameplay`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn root_as_gameplay(buf: &[u8]) -> Result<Gameplay, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Gameplay>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Gameplay` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_gameplay_unchecked`.
pub fn size_prefixed_root_as_gameplay(buf: &[u8]) -> Result<Gameplay, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Gameplay>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Gameplay` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn root_as_gameplay_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Gameplay<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Gameplay<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Gameplay` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gameplay_unchecked`.
pub fn size_prefixed_root_as_gameplay_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Gameplay<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Gameplay<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Gameplay and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Gameplay`.
pub unsafe fn root_as_gameplay_unchecked(buf: &[u8]) -> Gameplay {
  flatbuffers::root_unchecked::<Gameplay>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Gameplay and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Gameplay`.
pub unsafe fn size_prefixed_root_as_gameplay_unchecked(buf: &[u8]) -> Gameplay {
  flatbuffers::size_prefixed_root_unchecked::<Gameplay>(buf)
}
#[inline]
pub fn finish_gameplay_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Gameplay<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_gameplay_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Gameplay<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod GameplayFBData

